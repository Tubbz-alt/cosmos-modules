syntax = "proto3";

package cosmos_modules.incubator.group.v1_alpha.testdata;
option go_package = "github.com/cosmos/modules/incubator/group/testdata";

import "third_party/proto/cosmos-proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "group/types.proto";

// MyAppMsg is the payload stored with a proposal and executed when approved
message MyAppMsg {
    option (cosmos_proto.interface_type) = "*github.com/cosmos/cosmos-sdk/types.Msg";
    oneof sum {
        MsgAlwaysSucceed A = 1;
        MsgAlwaysFail B = 2;
        MsgSetValue C = 3;
        MsgIncCounter D = 4;
    }
}


message MyAppProposal {
    option (gogoproto.goproto_getters) = false;
    cosmos_modules.incubator.group.v1_alpha.ProposalBase base = 1 [(gogoproto.nullable) = false];
    repeated MyAppMsg msgs = 2 [(gogoproto.nullable) = false];
}

// MsgAlwaysSucceed is handled without errors
message MsgAlwaysSucceed {
}

// MsgAlwaysFail returns an error by the handler
message MsgAlwaysFail {
}
// MsgSetValue stores a value in the store
message MsgSetValue {
    string value = 1;
}
// MsgIncCounter increments a counter value
message MsgIncCounter {
}

message MsgPropose {
    cosmos_modules.incubator.group.v1_alpha.MsgProposeBase base = 1 [(gogoproto.nullable) = false];
    repeated MyAppMsg msgs = 2 [(gogoproto.nullable) = false];
}